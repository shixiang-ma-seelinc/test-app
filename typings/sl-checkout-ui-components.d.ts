// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../types-extension-sandbox/@/styles/styleConfig
//   ../../types-extension-sandbox/react
//   ../../types-extension-sandbox/@sl/checkout-ui-extensions
//   ../../types-extension-sandbox/@/components/DatePicker/component

declare module '@sl/checkout-ui-components' {
    import { Text } from '@sl/checkout-ui-components/components/Text';
    import { View } from '@sl/checkout-ui-components/components/View';
    import { TextBlock } from '@sl/checkout-ui-components/components/TextBlock';
    import { SkeletonText } from '@sl/checkout-ui-components/components/SkeletonText';
    import { SkeletonTextBlock } from '@sl/checkout-ui-components/components/SkeletonTextBlock';
    import { SkeletonImage } from '@sl/checkout-ui-components/components/SkeletonImage';
    import { Icon } from '@sl/checkout-ui-components/components/Icon';
    import { Banner } from '@sl/checkout-ui-components/components/Banner';
    import { Spinner } from '@sl/checkout-ui-components/components/Spinner';
    import { Divider } from '@sl/checkout-ui-components/components/Divider';
    import { Link } from '@sl/checkout-ui-components/components/Link';
    import { Checkbox } from '@sl/checkout-ui-components/components/Checkbox';
    import { ChoiceList, Choice } from '@sl/checkout-ui-components/components/ChoiceList';
    import { RichTextRenderer } from '@sl/checkout-ui-components/components/RichTextRenderer';
    import { BlockStack } from '@sl/checkout-ui-components/components/BlockStack';
    import { DatePicker } from '@sl/checkout-ui-components/components/DatePicker';
    import { DateField } from '@sl/checkout-ui-components/components/DateField';
    const __UI_COMPONENT_SYMBOL__: unique symbol;
    const components: {
        Text: typeof Text;
        TextBlock: typeof TextBlock;
        View: typeof View;
        SkeletonText: typeof SkeletonText;
        SkeletonTextBlock: typeof SkeletonTextBlock;
        SkeletonImage: typeof SkeletonImage;
        Banner: typeof Banner;
        Spinner: typeof Spinner;
        Divider: typeof Divider;
        Link: typeof Link;
        ChoiceList: typeof ChoiceList;
        Choice: typeof Choice;
        TextField: import("react").ForwardRefExoticComponent<import("./components/TextField/component").Props & import("react").RefAttributes<unknown>>;
        PhoneField: import("react").ForwardRefExoticComponent<import("./components/PhoneField/component").PhoneFieldProps & import("react").RefAttributes<unknown>>;
        BlockStack: typeof BlockStack;
        Select: import("react").ForwardRefExoticComponent<import("@sl/checkout-ui-extensions").SelectProps & {
            labelPosition?: import("./components/Select/component").ThemeLabelPosition | undefined;
            placeholder?: string | undefined;
        } & import("react").RefAttributes<HTMLSelectElement>>;
        Checkbox: typeof Checkbox;
        Button: import("react").ForwardRefExoticComponent<import("./components/Button").Props & import("react").RefAttributes<unknown>>;
        RichTextRenderer: typeof RichTextRenderer;
        DatePicker: typeof DatePicker;
        DateField: typeof DateField;
        Icon: typeof Icon;
        GeolocationContextProvider: import("react").Provider<import("./components/GeolocationContext").Geolocation>;
        TranslateContextProvider: import("react").Provider<import("./components/TranslateContext").Translate>;
        WindowContextProvider: import("react").Provider<import("./components/WindowContext").UiComponentWindow>;
        DocumentContextProvider: import("react").Provider<import("./components/DocumentContext").UiComponentDocument>;
        CreatePortalContextProvider: import("react").Provider<import("./components/CreatePortalContext").UiComponentCreatePortal>;
        VisibleContextProvider: import("react").Provider<boolean>;
    };
    export { __UI_COMPONENT_SYMBOL__ };
    export default components;
    export const componentsNames: Record<string, string>;
    export { AppContext, useAppContext, useTranslate, useLinkComponent, Props as AppContextProps, TranslationKey, LinkLikeComponentProps, } from '@sl/checkout-ui-components/components/AppContext';
    export { DEFAULT_GEOLOCATION, type Geolocation } from '@sl/checkout-ui-components/components/GeolocationContext';
    export { DEFAULT_TRANSLATE, type Translate } from '@sl/checkout-ui-components/components/TranslateContext';
    export { DEFAULT_UI_COMPONENT_WINDOW, type UiComponentWindow } from '@sl/checkout-ui-components/components/WindowContext';
    export { DEFAULT_UI_COMPONENT_CREATE_PORTAL, type UiComponentCreatePortal } from '@sl/checkout-ui-components/components/CreatePortalContext';
    export { DEFAULT_UI_COMPONENT_DOCUMENT, type UiComponentDocument, type UiComponentElement, } from '@sl/checkout-ui-components/components/DocumentContext';
    export { getCSSVariable } from '@/styles/styleConfig';
}

declare module '@sl/checkout-ui-components/components/Text' {
    export { Text } from '@sl/checkout-ui-components/components/Text/component';
}

declare module '@sl/checkout-ui-components/components/View' {
    export { View } from '@sl/checkout-ui-components/components/View/component';
}

declare module '@sl/checkout-ui-components/components/TextBlock' {
    export { TextBlock } from '@sl/checkout-ui-components/components/TextBlock/component';
}

declare module '@sl/checkout-ui-components/components/SkeletonText' {
    export { SkeletonText } from '@sl/checkout-ui-components/components/SkeletonText/component';
}

declare module '@sl/checkout-ui-components/components/SkeletonTextBlock' {
    export { SkeletonTextBlock } from '@sl/checkout-ui-components/components/SkeletonTextBlock/component';
}

declare module '@sl/checkout-ui-components/components/SkeletonImage' {
    export { SkeletonImage } from '@sl/checkout-ui-components/components/SkeletonImage/component';
}

declare module '@sl/checkout-ui-components/components/Icon' {
    export { Icon } from '@sl/checkout-ui-components/components/Icon/component';
}

declare module '@sl/checkout-ui-components/components/Banner' {
    export { Banner, Props } from '@sl/checkout-ui-components/components/Banner/component';
}

declare module '@sl/checkout-ui-components/components/Spinner' {
    export { Spinner } from '@sl/checkout-ui-components/components/Spinner/component';
}

declare module '@sl/checkout-ui-components/components/Divider' {
    export { Divider } from '@sl/checkout-ui-components/components/Divider/component';
}

declare module '@sl/checkout-ui-components/components/Link' {
    export { Link } from '@sl/checkout-ui-components/components/Link/component';
}

declare module '@sl/checkout-ui-components/components/Checkbox' {
    export { Checkbox, Props } from '@sl/checkout-ui-components/components/Checkbox/component';
}

declare module '@sl/checkout-ui-components/components/ChoiceList' {
    export { ChoiceList, Choice } from '@sl/checkout-ui-components/components/ChoiceList/component';
}

declare module '@sl/checkout-ui-components/components/RichTextRenderer' {
    export { RichTextRenderer } from '@sl/checkout-ui-components/components/RichTextRenderer/component';
}

declare module '@sl/checkout-ui-components/components/BlockStack' {
    export { BlockStack } from '@sl/checkout-ui-components/components/BlockStack/component';
}

declare module '@sl/checkout-ui-components/components/DatePicker' {
    export { DatePicker } from '@sl/checkout-ui-components/components/DatePicker/component';
}

declare module '@sl/checkout-ui-components/components/DateField' {
    export { DateField } from '@sl/checkout-ui-components/components/DateField/component';
}

declare module '@sl/checkout-ui-components/components/AppContext' {
    export { AppContext, Props, TranslationKey, useAppContext, useTranslate, useGeolocation, useLinkComponent, LinkLikeComponentProps, } from '@sl/checkout-ui-components/components/AppContext/AppContext';
}

declare module '@sl/checkout-ui-components/components/GeolocationContext' {
    export interface Geolocation {
        countryCode: string;
    }
    export const DEFAULT_GEOLOCATION: Geolocation;
    export const GeolocationContext: import("react").Context<Geolocation>;
}

declare module '@sl/checkout-ui-components/components/TranslateContext' {
    export type TranslationKey = 'close' | 'expand' | 'submit' | 'processing' | 'dismissNotification' | 'increment' | 'decrement' | 'january' | 'february' | 'march' | 'april' | 'may' | 'june' | 'july' | 'august' | 'september' | 'october' | 'november' | 'december' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday' | 'mondayAbbreviation' | 'tuesdayAbbreviation' | 'wednesdayAbbreviation' | 'thursdayAbbreviation' | 'fridayAbbreviation' | 'saturdayAbbreviation' | 'sundayAbbreviation' | 'showNextMonth' | 'showPreviousMonth';
    interface SimpleInterpolationReplacements {
        [key: string]: string | number;
    }
    export type Translate = (key: TranslationKey, replacements?: SimpleInterpolationReplacements) => Promise<string>;
    export const DEFAULT_TRANSLATE: Translate;
    export const TranslateContext: import("react").Context<Translate>;
    export {};
}

declare module '@sl/checkout-ui-components/components/WindowContext' {
    export type UiComponentWindow = Pick<Window, 'scrollX' | 'scrollY' | 'pageXOffset' | 'pageYOffset' | 'devicePixelRatio' | 'addEventListener' | 'removeEventListener'> & {
        matchMedia: (query: string) => Promise<{
            matches: boolean;
        }>;
    };
    export const DEFAULT_UI_COMPONENT_WINDOW: UiComponentWindow;
    export const WindowContext: import("react").Context<UiComponentWindow>;
}

declare module '@sl/checkout-ui-components/components/CreatePortalContext' {
    import React from 'react';
    export type UiComponentCreatePortal = (element: React.ReactNode, options: UiComponentCreatePortalProps) => React.ReactElement;
    export interface UiComponentCreatePortalProps {
            /**
                * Query this container to insert, default to `body`
                */
            portalContainerSelector?: string;
            /**
                * Default to `div`
                */
            portalType?: string;
            /**
                * If your container is in iframe, then you should set this
                */
            iframeSelector?: string;
            children?: React.ReactNode;
    }
    export const DEFAULT_UI_COMPONENT_CREATE_PORTAL: UiComponentCreatePortal;
    export const CreatePortalContext: React.Context<UiComponentCreatePortal>;
}

declare module '@sl/checkout-ui-components/components/DocumentContext' {
    export interface UiComponentElement {
        scrollTop: number;
        scrollLeft: number;
    }
    export type UiComponentDocument = Pick<Document, 'addEventListener' | 'removeEventListener'> & {
        getElementsByClassName: (className: string) => UiComponentElement[];
        body: any;
        documentElement: any;
        activeElement: any;
        querySelectorAll: any;
        querySelector: any;
    };
    export const DEFAULT_UI_COMPONENT_DOCUMENT: UiComponentDocument;
    export const DocumentContext: import("react").Context<UiComponentDocument>;
}

declare module '@sl/checkout-ui-components/components/Text/component' {
    import React, { PropsWithChildren } from 'react';
    import { TextProps, TextSize } from '@sl/checkout-ui-extensions';
    import type { ThemeTypographyStyle } from '@sl/checkout-ui-components/components/Theme';
    export const textSizeList: Array<TextSize>;
    interface Props extends PropsWithChildren<TextProps> {
        /** Changes the text based on the Theme styles */
        style?: ThemeTypographyStyle;
        className?: string;
    }
    export function Text({ children, size, emphasis, id, role, visibility, accessibilityVisibility, className, }: Props): React.JSX.Element;
    export {};
}

declare module '@sl/checkout-ui-components/components/View/component' {
    import React, { PropsWithChildren } from 'react';
    import { ViewProps } from '@sl/checkout-ui-extensions';
    export function View({ accessibilityLabel, accessibilityVisibility, children, display, id, maxInlineSize, visibility, opacity, overflow, ...props }: PropsWithChildren<ViewProps>): React.JSX.Element;
}

declare module '@sl/checkout-ui-components/components/TextBlock/component' {
    import React, { PropsWithChildren } from 'react';
    import { TextBlockProps } from '@sl/checkout-ui-extensions';
    export interface Props extends PropsWithChildren<TextBlockProps> {
        className?: string;
    }
    export function TextBlock({ size, emphasis, appearance, inlineAlignment, id, className, children, }: Props): React.JSX.Element;
}

declare module '@sl/checkout-ui-components/components/SkeletonText/component' {
    import React, { PropsWithChildren } from 'react';
    export interface Props extends PropsWithChildren<any> {
        size?: 'small' | 'medium' | 'large';
        className?: string;
    }
    export function SkeletonText({ size, className }: Props): React.JSX.Element;
}

declare module '@sl/checkout-ui-components/components/SkeletonTextBlock/component' {
    import React, { PropsWithChildren } from 'react';
    type Size = 'small' | 'medium' | 'large';
    export interface Props extends PropsWithChildren<any> {
        size?: Size;
    }
    export function SkeletonTextBlock({ size }: Props): React.JSX.Element | null;
    export {};
}

declare module '@sl/checkout-ui-components/components/SkeletonImage/component' {
    import React from 'react';
    export function SkeletonImage(): React.JSX.Element;
}

declare module '@sl/checkout-ui-components/components/Icon/component' {
    import React from 'react';
    import { IconProps } from '@sl/checkout-ui-extensions';
    const BUNDLED_ICONS: {
        arrowLeft: any;
        arrowRight: any;
        calendar: any;
        camera: any;
        cancelCircle: any;
        caretDown: any;
        cart: any;
        checkmark: any;
        checkmarkCircle: any;
        chevronDown: any;
        chevronUp: any;
        chevronRight: any;
        chevronLeft: any;
        close: any;
        critical: any;
        discount: any;
        delivered: any;
        delivery: any;
        disabled: any;
        errorFill: any;
        geolocation: any;
        info: any;
        list: any;
        locateMe: any;
        lock: any;
        map: any;
        marker: any;
        minus: any;
        mobile: any;
        plus: any;
        questionFill: any;
        reorder: any;
        spinner: any;
        spinnerSmall: any;
        store: any;
        success: any;
        truck: any;
        warning: any;
        warningCircle: any;
        warningFill: any;
        giftFill: any;
        external: any;
        bag: any;
    };
    interface Props extends IconProps {
        className?: string;
        content?: boolean;
    }
    export function Icon({ source, appearance, size, accessibilityLabel, className, content, }: Props & {
        source: keyof typeof BUNDLED_ICONS;
    }): React.JSX.Element;
    export const AVAILABLE_ICONS: string[];
    export {};
}

declare module '@sl/checkout-ui-components/components/Banner/component' {
    import { PropsWithChildren, ReactNode } from 'react';
    import React from 'react';
    export interface Props extends PropsWithChildren<any> {
        title?: string | ReactNode;
        status?: 'info' | 'success' | 'warning' | 'critical';
        size?: 'small' | 'large';
    }
    export function Banner({ title, status, size }: Props): React.JSX.Element;
}

declare module '@sl/checkout-ui-components/components/Spinner/component' {
    import React, { PropsWithChildren } from 'react';
    export interface SpinnerProps {
        text?: string;
        appearance?: 'base' | 'accent' | 'decorative' | 'interactive' | 'subdued' | 'info' | 'success' | 'warning' | 'critical' | 'monochrome';
        size?: 'extraSmall' | 'small' | 'base' | 'large' | 'fill';
    }
    export function Spinner({ text, size, appearance, }: PropsWithChildren<SpinnerProps>): React.JSX.Element;
}

declare module '@sl/checkout-ui-components/components/Divider/component' {
    import React from 'react';
    import { DividerProps } from '@sl/checkout-ui-extensions';
    export function Divider({ size, direction, alignment, id, }: DividerProps): React.JSX.Element;
}

declare module '@sl/checkout-ui-components/components/Link/component' {
    import React, { PropsWithChildren } from 'react';
    import { LinkProps } from '@sl/checkout-ui-extensions';
    import { ThemeTypographyStyle } from '@sl/checkout-ui-components/components/Theme';
    export interface Props extends LinkProps {
            /**
                * Changes the text based on the Theme styles
                */
            style?: ThemeTypographyStyle;
            appearance?: string;
            textDecoration?: string;
            transitionDuration?: string;
    }
    /**
        * Link is used to navigate the buyer to another page or section within the same page.
        */
    export function Link({ children, to, language, onPress, appearance, textDecoration, transitionDuration, accessibilityLabel, ...rest }: PropsWithChildren<Props>): React.JSX.Element;
}

declare module '@sl/checkout-ui-components/components/Checkbox/component' {
    import React, { PropsWithChildren } from 'react';
    import { CheckboxProps } from '@sl/checkout-ui-extensions';
    export type Props = PropsWithChildren<CheckboxProps>;
    export function Checkbox({ id: explicitId, name, accessibilityLabel, error, disabled, children, checked, ...rest }: Props): React.JSX.Element;
    interface ControlProps extends Omit<Props, 'id' | 'error' | 'children' | 'accessibilityLabel'> {
        error?: boolean;
        id: string;
    }
    export function CheckboxControl({ id, name, checked, disabled, error, onChange, }: ControlProps): React.JSX.Element;
    export {};
}

declare module '@sl/checkout-ui-components/components/ChoiceList/component' {
    import React, { PropsWithChildren } from 'react';
    import { ChoiceListProps as CheckoutChoiceListProps, ChoiceProps as CheckoutChoiceProps } from '@sl/checkout-ui-extensions';
    export type ChoiceListProps<T extends string | string[]> = PropsWithChildren<CheckoutChoiceListProps<T>>;
    export type ChoiceProps = PropsWithChildren<CheckoutChoiceProps>;
    export function ChoiceList<T extends string | string[]>({ type, name, value, onChange, children, }: PropsWithChildren<ChoiceListProps<T>>): React.JSX.Element;
    export function Choice({ id, disabled, accessibilityLabel, children, }: PropsWithChildren<ChoiceProps>): React.JSX.Element;
}

declare module '@sl/checkout-ui-components/components/RichTextRenderer/component' {
    import React from 'react';
    import { UiComponentDocument } from '@sl/checkout-ui-components/components/DocumentContext';
    export interface RichTextRendererProps {
        content: {
            __html: string | TrustedHTML;
        };
    }
    export function getCurrentPlatform(document: UiComponentDocument): "mobile" | "pc";
    export function RichTextRenderer(props: RichTextRendererProps): React.JSX.Element;
    export function RichTextRendererBackup(props: RichTextRendererProps): React.JSX.Element;
}

declare module '@sl/checkout-ui-components/components/BlockStack/component' {
    import React, { PropsWithChildren } from 'react';
    import { BlockStackProps } from '@sl/checkout-ui-extensions';
    interface Props extends BlockStackProps {
        className?: string;
    }
    export function BlockStack({ alignment, spacing, children, className, }: PropsWithChildren<Props>): React.JSX.Element;
    export {};
}

declare module '@sl/checkout-ui-components/components/DatePicker/component' {
    import React from 'react';
    import { Weekday } from '@sl/checkout-ui-components/utilities/dates';
    export type ISODate = string;
    export interface Range {
            /** First day (inclusive) of the selected range */
            start?: ISODate;
            /** Last day (inclusive) of the selected range */
            end?: ISODate;
    }
    export type YearMonth = {
            year: number;
            month: number;
    } | ISODate;
    export type DayString = keyof typeof Weekday;
    export type DisabledDate = ISODate | Range | DayString;
    export interface Props<T extends ISODate | ISODate[] | Range> {
            /**
                * [Controlled](https://reactjs.org/docs/forms.html#controlled-components) year and month to display.
                * Use in combination with `onYearMonthChange`.
                * Makes year/month navigation controlled.
                * 需都存在才生效
                */
            yearMonth?: YearMonth;
            /**
                * Default [uncontrolled](https://reactjs.org/docs/forms.html#controlled-components) year and month to display.
                * Ignored when year/month navigation is controlled.
                */
            defaultYearMonth?: YearMonth;
            /**
                * Disabled dates, days, and/or ranges, or the date picker.
                * Unbound range disables all dates either from `start` date or to `end` date.
                * `true` disables the date picker.
                * disabled 为true则所有日期均不能选择
                */
            disabled?: DisabledDate[] | boolean;
            /**
                * Whether the date picker is read-only.
                * readOnly 为true则不允许点击操作
                */
            readOnly?: boolean;
            /**
                * A date, an array of dates, or a range object with `start` and/or `to` keys indicating the selected dates.
                * When a range is provided, dates between the boundaries will be highlighted.
                */
            selected: T;
            /**
                * A callback that is run whenever a date is selected or unselected. This callback
                * is called with a string, an array of strings or a range object representing the selected dates.
                * This component is [controlled](https://reactjs.org/docs/forms.html#controlled-components),
                * so you **must** store these values in state and reflect it back in the
                * `selected` props.
                */
            onChange?(selected: T): void;
            /**
                * A callback that is run whenever the month is changed. This callback
                * is called with `month` and `year` values indicating the month the UI should change to.
                * This component is [controlled](https://reactjs.org/docs/forms.html#controlled-components),
                * so you **must** store these values in state and reflect it back in the
                * `month` and `year` props.
                */
            onYearMonthChange?(yearMonth: {
                    year: number;
                    month: number;
            }): void;
    }
    export function DatePicker<T extends ISODate[] | ISODate | Range>(props: Props<T>): React.JSX.Element;
}

declare module '@sl/checkout-ui-components/components/DateField/component' {
    import React from 'react';
    import { DateFieldProps } from '@sl/checkout-ui-extensions';
    export function DateField(props: DateFieldProps): React.JSX.Element;
}

declare module '@sl/checkout-ui-components/components/AppContext/AppContext' {
    import React, { ReactNode, HTMLProps, ComponentType } from 'react';
    export interface LinkLikeComponentProps extends HTMLProps<HTMLAnchorElement> {
        to: string;
        children?: React.ReactNode;
        external?: boolean;
        [key: string]: any;
    }
    export type TranslationKey = 'close' | 'expand' | 'submit' | 'processing' | 'dismissNotification' | 'increment' | 'decrement' | 'january' | 'february' | 'march' | 'april' | 'may' | 'june' | 'july' | 'august' | 'september' | 'october' | 'november' | 'december' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday' | 'mondayAbbreviation' | 'tuesdayAbbreviation' | 'wednesdayAbbreviation' | 'thursdayAbbreviation' | 'fridayAbbreviation' | 'saturdayAbbreviation' | 'sundayAbbreviation' | 'showNextMonth' | 'showPreviousMonth';
    export interface SimpleInterpolationReplacements {
        [key: string]: string | number;
    }
    export interface Geolocation {
        countryCode?: string;
    }
    export interface Context {
        linkComponent?: ComponentType<LinkLikeComponentProps>;
        geolocation?: Geolocation;
        translate(key: string, replacements?: SimpleInterpolationReplacements): string;
    }
    export const AppContextContext: React.Context<Context | null>;
    export interface Props extends Context {
        children?: ReactNode;
    }
    export function AppContext({ children, linkComponent, geolocation, translate, }: Props): React.JSX.Element;
    export function useAppContext(): Context;
    export function useTranslate(): (key: string, replacements?: SimpleInterpolationReplacements | undefined) => string;
    export function useLinkComponent(): React.ComponentType<LinkLikeComponentProps> | undefined;
    export function useGeolocation(): Geolocation | undefined;
}

declare module '@sl/checkout-ui-components/components/Theme' {
    export type { ThemeTypographyStyle } from '@sl/checkout-ui-components/components/Theme/types';
}

declare module '@sl/checkout-ui-components/utilities/dates' {
    import { DisabledDate, ISODate, Range } from '@/components/DatePicker/component';
    export type Year = number;
    export enum Month {
        January = 0,
        February = 1,
        March = 2,
        April = 3,
        May = 4,
        June = 5,
        July = 6,
        August = 7,
        September = 8,
        October = 9,
        November = 10,
        December = 11
    }
    export enum Weekday {
        Sunday = 0,
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6
    }
    export type Week = (Date | undefined)[];
    export const WEEK_LENGTH = 7;
    export const WEEK_START_DAYS: Map<string, Weekday>;
    export const ORDERED_WEEKDAYS: Map<number, number[]>;
    export const DEFAULT_WEEK_START_DAY = Weekday.Sunday;
    export const DEFAULT_ORDERED_WEEKDAYS: number[];
    export function getWeekStartDay(countryCode?: string): Weekday;
    export function getOrderedWeekdays(weekStartsOn: number): number[];
    export function getWeeksForMonth(month: number, year: number, weekStartsOn?: Weekday): Week[];
    export function isSameDate(day1: Date, day2: Date): boolean;
    export function formattedDate(date: any): string;
    export function isToday(date: Date): boolean;
    export function getNextDisplayMonth(month: number): number;
    export function getNextDisplayYear(month: number, year: number): number;
    export function getPreviousDisplayMonth(month: number): number;
    export function getPreviousDisplayYear(month: number, year: number): number;
    export function formatDateInput(value: string): string;
    export function isValidDateString(value: string): boolean;
    export function isValidDate(dateString: string): boolean;
    export function translateDate<T extends ISODate[] | ISODate | Range>(date: any, rangeDate?: T): {
        curDate: Date;
        beginDate: any;
        endDate: any;
    };
    export function isInRange<T extends ISODate[] | ISODate | Range>(date: any, rangeDate: T): boolean;
    export const isDisabled: (date: Date | undefined, disabled: boolean | DisabledDate[]) => boolean;
}

declare module '@sl/checkout-ui-components/components/Theme/types' {
    export type ThemeTypographyStyle = 'style1' | 'style2' | 'style3' | 'style4' | 'style5' | 'style6' | 'style7' | 'style8' | 'style9';
    export type ThemeLabelPosition = 'inside' | 'outside' | 'inline';
    export type ThemeBackground = 'surfacePrimary' | 'surfaceSecondary' | 'surfaceTertiary' | 'transparent';
}

