// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../types-extension-sandbox/react
//   ../../types-extension-sandbox/@sl/checkout-ui-components
//   ../../types-extension-sandbox/axios

declare module '@sl/extension-sandbox' {
    export { ExtensionSandbox } from '@sl/extension-sandbox/host/ExtensionSandbox';
    export * from "@sl/extension-sandbox/remote/types";
}

declare module '@sl/extension-sandbox/host/ExtensionSandbox' {
    import React from 'react';
    import { ExtensionAppData } from '@sl/extension-sandbox/types/data';
    import { ExtensionCommonProps } from '@sl/extension-sandbox/types/api';
    import { type Geolocation, type Translate } from '@sl/checkout-ui-components';
    interface ExtensionSandboxProps {
            /**
                * All Extension App datasets
                */
            extensionAppDataset: ExtensionAppData[];
            /**
                * Get Extension App containers by Extension Point
                */
            getExtensionSlots: (extensionPoint: string) => HTMLElement[];
            /**
                * API passed down to every Extension App
                */
            commonExtensionProps: ExtensionCommonProps;
            /**
                * Worker script url
                */
            workerScriptUrl: string;
            /**
                * For '@sl/checkout-ui-components'
                */
            geolocation?: Geolocation;
            /**
                * For '@sl/checkout-ui-components'
                */
            translate?: Translate;
    }
    /**
        * Extension Sandbox
        */
    export const ExtensionSandbox: React.ForwardRefExoticComponent<ExtensionSandboxProps>;
    export {};
}

declare module '@sl/extension-sandbox/remote/types' {
    import type { ExtensionAppProps } from '@sl/extension-sandbox/types/data';
    export type ExtensionSandboxRemoteRender = (extensionPoint: string, Component: React.ComponentType<ExtensionAppProps>) => void;
}

declare module '@sl/extension-sandbox/types/data' {
    import type { ExtensionAppInterceptor } from '@sl/extension-sandbox/host/context/ExtensionAppContext';
    import type { ExtensionStorage } from '@sl/extension-sandbox/host/hooks/useExtensionStorage';
    import type { ExtensionAppRequest } from '@sl/extension-sandbox/remote/hooks/useExtensionNetworkAccess';
    export interface ExtensionAppData {
            /**
                * Extension App Instance ID, **MUST** be unique
                */
            id: string;
            /**
                * Locale of Extension App
                */
            extensionLocale: string;
            /**
                * Capabilities of Extension App, provided by toml file
                */
            capabilities: ExtensionCapabilities;
            translations: Record<string, string>;
            /**
                * `settings` is set by user via admin
                */
            settings?: Record<string, string>;
            /**
                * `behaviors` is set by user via admin
                */
            behaviors: {
                    /**
                        * If block main process
                        *
                        * @defaultValue `false`
                        */
                    blockProgress: boolean;
                    /**
                        * If network access is allowed
                        *
                        * @defaultValue `false`
                        */
                    networkAccess: boolean;
            };
            /**
                * Extension App ID, may have multiple Extension App Instance with the same uuid
                */
            uuid: string;
            /**
                * URL of Extension App
                */
            scriptUrl: string;
            /**
                * Extension Point to mount
                */
            extensionPoint: string;
            placementReference?: string;
            type: string;
    }
    /**
        * Capabilities of Extension App, provided by toml file
        */
    export interface ExtensionCapabilities {
            block_progress?: boolean;
            network_access?: boolean;
    }
    /**
        * Behaviors of Extension App, user can determine if he/she want to enable the corresponding capabilities
        */
    export interface ExtensionBehaviors {
            blockProgress?: boolean;
            networkAccess?: boolean;
    }
    export interface ExtensionI18n {
            translate: (key: string, options?: Record<string, string>) => string[] | string;
    }
    /**
        * Props for ExtensionApp
        */
    export interface ExtensionAppProps {
            version: 'unstable';
            note: string;
            shop: Shop;
            cost: CartCost;
            lines: CartLine[];
            localization: Localization;
            journeyCompleted: boolean;
            geolocation: {
                    countryCode: string;
            };
            i18n: ExtensionI18n;
            applyCartLinesChange: (change: CartLineChange) => Promise<{
                    type: string;
                    message: string;
                    data: any;
            }>;
            applyNoteChange: (change: NoteChange) => Promise<{
                    type: string;
                    message: string;
                    data: any;
            }>;
            extensionPoint: string;
            settings: Record<string, string>;
            extension: ExtensionAppData;
            storage: ExtensionStorage;
            request?: ExtensionAppRequest;
            interceptor?: ExtensionAppInterceptor;
    }
    export interface Localization {
            /**
                * The currency that the buyer sees for money amounts in the checkout.
                */
            currency: Currency;
            /**
                * The language the buyer sees in the checkout.
                */
            language: Language;
    }
    export interface Language {
            /**
                * The BCP-47 language tag. It may contain a dash followed by an ISO 3166-1 alpha-2 region code.
                *
                * @example 'en' for English, or 'en-US' for English local to United States.
                * @see https://en.wikipedia.org/wiki/IETF_language_tag
                * @see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
                */
            isoCode: string;
    }
    export interface Currency {
            /**
                * The ISO-4217 code for this currency.
                * @see https://www.iso.org/iso-4217-currency-codes.html
                */
            isoCode: unknown;
    }
    export interface CartLine {
            /**
                * These line item IDs are not stable at the moment, they might change after
                * any operations on the line items. You should always look up for an updated
                * ID before any call to `applyCartLinesChange` because you'll need the ID to
                * create a `CartLineChange` object.
                */
            id: string;
            /**
                * The quantity of the merchandise being purchased.
                */
            quantity: number;
            variantId: string;
            /**
                * The details about the cost components attributed to the cart line.
                */
            cost: CartLineCost;
            /**
                * The line item additional custom attributes.
                */
            attributes: Attribute[];
            /**
                * Discounts applied to the cart line.
                */
            discountAllocations: DiscountAllocationDTO[];
    }
    export interface CartLineCost {
            /**
                * The total amount after reductions the buyer can expect to pay that is directly attributable to a single
                * cart line.
                */
            totalAmount: Money;
    }
    export interface Attribute {
            name: string;
            value?: string;
            urls?: string[];
            type: string;
            show?: boolean;
            export?: boolean;
            extInfo?: string;
    }
    interface DiscountAllocationDTO {
            amount: string;
            discountApplication: DiscountApplicationDTO;
    }
    interface DiscountApplicationDTO {
            targetSelection?: string;
            targetType?: string;
            title?: string;
            totalAllocatedAmount?: string;
            type?: string;
            value?: string;
            valueType?: string;
    }
    export interface Shop {
            /**
                * The shop ID.
                */
            id: string;
            /**
                * The name of the shop.
                */
            name: string;
            /**
                * The shop's domain.
                */
            domain: string;
    }
    export interface Money {
            /**
                * The price amount.
                */
            amount: number;
            /**
                * The ISO 4217 format for the currency.
                * @example 'CAD' for Canadian dollar
                */
            currencyCode: string;
    }
    export interface CartCost {
            /**
                * A `Money` value representing the minimum a buyer can expect to pay at the current
                * step of checkout. This value excludes amounts yet to be negotiated. For example,
                * the information step might not have delivery costs calculated.
                */
            totalAmount: Money;
    }
    export type CartLineChange = CartLineAddChange | CartLineRemoveChange | CartLineUpdateChange;
    export interface CartLineAddChange {
            /**
                * An identifier for changes that add line items.
                */
            type: 'addCartLine';
            lineItems: {
                    /**
                        * The new sku ID for the line item.
                        */
                    variantId: string;
                    /**
                        * The new quantity for the line item.
                        */
                    quantity?: number;
            }[];
    }
    export interface CartLineRemoveChange {
            /**
                * An identifier for changes that remove line items.
                */
            type: 'removeCartLine';
            /**
                * Line Item IDs.
                */
            lineItemIds: string[];
    }
    export interface CartLineUpdateChange {
            /**
                * An identifier for changes that update line items.
                */
            type: 'updateCartLine';
            lineItems: LineItems[];
    }
    interface LineItems {
            /**
                * Line Item ID.
                */
            id: number;
            /**
                * The new sku ID for the line item.
                */
            variantId?: string;
            /**
                * The new quantity for the line item.
                */
            quantity?: number;
    }
    export type NoteChange = NoteRemoveChange | NoteUpdateChange;
    /**
        * An Update to a note on the order.
        * for example, the buyer could request detailed packaging instructions in an order note
        */
    export interface NoteUpdateChange {
            /**
                * The type of the `NoteUpdateChange` API.
                */
            type: 'updateNote';
            /**
                * The new value of the note.
                */
            note: string;
    }
    /**
        * Removes a note
        */
    export interface NoteRemoveChange {
            /**
                * The type of the `NoteRemoveChange` API.
                */
            type: 'removeNote';
    }
    export {};
}

declare module '@sl/extension-sandbox/types/api' {
    import { ExtensionAppInterceptor } from '@sl/extension-sandbox/host/context/ExtensionAppContext';
    import { ExtensionAppRequest } from '@sl/extension-sandbox/remote/hooks/useExtensionNetworkAccess';
    import { ExtensionStorage } from '@sl/extension-sandbox/host/hooks/useExtensionStorage';
    import { ExtensionAppData } from '@sl/extension-sandbox/types/data';
    export type ExtensionCommonProps = Record<string, any>;
    export interface ExtensionSpecificProps {
            version: string;
            extensionPoint: string;
            settings: ExtensionAppData['settings'];
            extension: ExtensionAppData;
            storage: ExtensionStorage;
            /**
                * `interceptor` for intercept the buying process like validation
                */
            interceptor?: ExtensionAppInterceptor;
            /**
                * `request` for additional resources
                */
            request?: ExtensionAppRequest;
    }
}

declare module '@sl/extension-sandbox/host/context/ExtensionAppContext' {
    import type { Geolocation, Translate, UiComponentWindow, UiComponentDocument } from '@sl/checkout-ui-components';
    import React from 'react';
    import { ExtensionCommonProps } from '@sl/extension-sandbox/types/api';
    import { ExtensionAddValidateInterceptor } from '@sl/extension-sandbox/host/hooks/useExtensionInterceptorManager';
    export interface ExtensionAppContextProps {
            /**
                * Common Extension Props for all extensions
                */
            commonExtensionProps: ExtensionCommonProps;
            /**
                * Extension runtime script url
                */
            workerScriptUrl: string;
            /**
                * ExtensionApp Interceptor
                */
            interceptor: ExtensionAppInterceptor;
            geolocation?: Geolocation;
            translate?: Translate;
            uiComponentWindow?: UiComponentWindow;
            uiComponentDocument?: UiComponentDocument;
    }
    export interface ExtensionAppInterceptor {
            /**
                * Extension App call this to add validate interceptor
                */
            validate: ExtensionAddValidateInterceptor;
    }
    export const ExtensionAppContext: React.Context<ExtensionAppContextProps>;
    export const ExtensionAppContextWrapper: React.FC<ExtensionAppContextProps & {
            children: React.ReactNode;
    }>;
}

declare module '@sl/extension-sandbox/host/hooks/useExtensionStorage' {
    import { ExtensionAppData } from '@sl/extension-sandbox/types/data';
    export default function useExtensionStorage(extensionAppData: ExtensionAppData): ExtensionStorage;
    export interface ExtensionStorage {
        read: (key: string) => Promise<any>;
        write: (key: string, value: any) => Promise<void>;
        delete: (key: string) => Promise<void>;
    }
}

declare module '@sl/extension-sandbox/remote/hooks/useExtensionNetworkAccess' {
    import { AxiosInstance } from 'axios';
    /**
      * Each Extension App has its own request instance
      */
    export default function useExtensionNetworkAccess(): ExtensionAppRequest;
    export type ExtensionAppRequest = AxiosInstance;
}

declare module '@sl/extension-sandbox/host/hooks/useExtensionInterceptorManager' {
    type ExtensionValidateResult = {
        success: boolean;
    };
    export default function useExtensionInterceptorManager(): ExtensionInterceptorManager;
    export interface ExtensionInterceptorManager {
        addValidate: ExtensionAddValidateInterceptor;
        runValidate: () => Promise<ExtensionValidateResult>;
    }
    export type ExtensionAddValidateInterceptor = (interceptor: ExtensionValidateInterceptor) => void;
    export interface ExtensionInterceptorHandle {
        unsubscribe: () => boolean;
    }
    export type ExtensionValidateInterceptor = () => Promise<ExtensionValidateResult>;
    export {};
}

